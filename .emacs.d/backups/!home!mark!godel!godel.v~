Require Import Lia.
Require Import Nat.
Require Import List.

(* S K combinators *)
Inductive cexpr :=
| var : nat -> cexpr (* var 0 denotes variable 0, var 1 denotes variable 1, etc *)
| S : cexpr
| K : cexpr
| app : cexpr -> cexpr -> cexpr.

Notation " a + b " := (app a b) (at level 50, left associativity).

Inductive steps : cexpr -> cexpr -> Prop :=
| steps_S : forall x y z, steps (S + x + y + z) (x + z + (y + z))
| steps_K : forall x y, steps (K + x + y) x
| steps_app_l : forall x y z, steps x y -> steps (x + z) (y + z)
| steps_app_r : forall x y z, steps x y -> steps (z + x) (z + y).

Notation " a ~> b " := (steps a b) (at level 55, left associativity).

Inductive steps_star : cexpr -> cexpr -> Prop :=
| steps_once : forall c1 c2, c1 ~> c2 -> steps_star c1 c2
| steps_many : forall c1 c2 c3, c1 ~> c2 -> steps_star c2 c3 -> steps_star c1 c3.

Notation " a ~>* b " := (steps_star a b) (at level 55, left associativity).

Theorem steps_star_trans : forall c1 c2 c3, (c1 ~>* c2) -> (c2 ~>* c3) -> (c1 ~>* c3).
Proof.
  intros.

  induction H.
  *
    eapply steps_many.
    apply H.
    apply H0.
  *
    eapply steps_many.
    apply H.
    apply IHsteps_star.
    apply H0.
Qed.

Theorem steps_star_app_l : forall c1 c2 c3, (c1 ~>* c2) -> (c1 + c3) ~>* (c2 + c3).
Proof.
  intros.
  induction H.
  *
    eapply steps_once.
    apply steps_app_l.
    apply H.
  *
    eapply steps_many.
    apply steps_app_l.
    apply H.
    apply IHsteps_star.
Qed.

Theorem steps_star_app_r : forall c1 c2 c3, (c1 ~>* c2) -> (c3 + c1) ~>* (c3 + c2).
Proof.
  intros.
  induction H.
  *
    eapply steps_once.
    apply steps_app_r.
    apply H.
  *
    eapply steps_many.
    apply steps_app_r.
    apply H.
    apply IHsteps_star.
Qed.
    
Inductive equiv : cexpr -> cexpr -> Prop :=
| equiv_steps : forall c1 c2, (c1 ~> c2) -> equiv c1 c2
| equiv_app_l : forall x y z, equiv x y -> equiv (x + z) (y + z)
| equiv_app_r : forall x y z, equiv x y -> equiv (z + x) (z + y)
| equiv_refl : forall x, equiv x x
| equiv_sym : forall x y, equiv x y -> equiv y x
| equiv_trans : forall x y z, equiv x y -> equiv y z -> equiv x z.

Notation "x ~= y" := (equiv x y) (at level 55).
Notation "x ~/= y" := (~ (equiv x y)) (at level 55).

Theorem equiv_steps_star : forall c1 c2, c1 ~>* c2 -> c1 ~= c2.
Proof.
  intros.
  induction H.
  * apply equiv_steps.
    assumption.
  * eapply equiv_trans.
    apply equiv_steps.
    apply H.
    assumption.
Qed.

(* Substitutes variable n with c *)
Definition fmap := nat -> option cexpr.
Definition fmap_empty : fmap := fun n => None.
Definition fmap_assn (f: fmap) (n: nat) (c: cexpr) :=
  fun m => if m =? n then Some c else f m.
Definition fmap_del (f: fmap) (n: nat) :=
  fun m => if m =? n then None else f m.

Notation "'_'" := (fmap_empty).
Notation "n '!->' c ',' f" := (fmap_assn f n c)
                                (at level 100, c at next level, right associativity).

Definition is_empty (f : fmap) := forall n, f n = None.

Fixpoint cexpr_subst (v : cexpr) (f: fmap) : cexpr :=
  match v with
  | var m => match f m with
             | Some c => c
             | None => var m
             end
  | va + vb => (cexpr_subst va f) + (cexpr_subst vb f)
  | S => S
  | K => K
  end.

Notation " e ; f " := (cexpr_subst e f) (at level 60, no associativity).

Theorem subst_empty : forall c f, is_empty f -> c ; f = c.
Proof.
  intros.
  induction c.
  *
    unfold cexpr_subst.
    rewrite H.
    reflexivity.
  *
    simpl.
    reflexivity.
  *
    simpl.
    reflexivity.
  *
    simpl.
    rewrite IHc1.
    rewrite IHc2.
    reflexivity.
Qed.

Theorem steps_subst : forall v1 v2, v1 ~> v2 -> forall f, (v1; f) ~> (v2; f).
Proof.
  intros v1 v2 H.
  induction H; intros.
  *
    simpl.
    apply steps_S.
  *
    simpl.
    apply steps_K.
  *
    simpl.
    apply steps_app_l.
    apply IHsteps.
  *
    simpl.
    apply steps_app_r.
    apply IHsteps.
Qed.

Theorem steps_star_subst : forall v1 v2, v1 ~>* v2 -> forall f, (v1; f) ~>* (v2; f).
Proof.
  intros.
  induction H.
  *
    apply steps_once.
    apply steps_subst.
    assumption.
  *
    eapply steps_many.
    apply steps_subst.
    apply H.
    assumption.
Qed.

Theorem equiv_subst : forall v1 v2, v1 ~= v2 -> forall f, (v1; f) ~= (v2; f).
Proof.
  intros.
  induction H.
  *
    apply equiv_steps.
    apply steps_subst.
    assumption.
  *
    simpl.
    apply equiv_app_l.
    assumption.
  *
    simpl.
    apply equiv_app_r.
    assumption.
  *
    apply equiv_refl.
  *
    apply equiv_sym.
    assumption.
  *
    eapply equiv_trans.
    apply IHequiv1.
    apply IHequiv2.
Qed.

(* If (S ~= K) then the universe collapses into one combinator *)
Axiom nequiv_S_K : S ~/= K.

Theorem K_cancellation : forall x y, K + x ~= K + y -> x ~= y.
Proof.
  intros.

  assert (K + x + K ~= x) as A. {
    apply equiv_steps.
    apply steps_K.
  }

  assert (K + y + K ~= y) as B. {
    apply equiv_steps.
    apply steps_K.
  }

  assert (K + x + K ~= K + y + K) as C. {
    apply equiv_app_l.
    assumption.
  }

  eapply equiv_trans.
  apply equiv_sym.
  apply A.

  eapply equiv_trans.
  apply C.
  
  apply B.
Qed.

Theorem nequiv_K_Kx : forall x, K ~/= K + x.
Proof.
  unfold not. intros.

  assert (forall y, K + y ~= K + x + y) as A. {
    intros.
    apply equiv_app_l.
    assumption.
  }

  assert (forall y, K + y ~= x) as B. {
    intros.
    eapply equiv_trans.
    apply (A y).
    apply equiv_steps.
    apply steps_K.
  }

  assert (forall y1 y2, K + y1 ~= K + y2) as C. {
    intros.
    eapply equiv_trans.
    apply (B y1).
    apply equiv_sym.
    apply (B y2).
  }

  assert (S ~= K) as equiv_S_K. {
    apply K_cancellation.
    apply C.
  }
  
  apply nequiv_S_K.
  assumption.
Qed.
  
(* Deriving I from S K *)
Definition I : cexpr := S + K + K.

Theorem steps_star_I : forall c, (I + c) ~>* c.
Proof.
  intro.
  unfold I.

  eapply steps_many.
  apply steps_S.

  eapply steps_once.
  apply steps_K.
Qed.

(* Master algorithm to derive a SKI combinator for any variable expresssion *)

(* Gets the alpha-eliminate variable n *)
Fixpoint alpha_elim (v : cexpr) (n: nat) : cexpr :=
  match v with
  | var m => if (eqb m n) then I else K + var m
  | S => (K + S)
  | K => (K + K)
  | va + vb => S + (alpha_elim va n) + (alpha_elim vb n)
  end.

Theorem steps_star_alpha_elim :
  forall c n, (alpha_elim c n) + var n ~>* c.
Proof.
  intros.
  induction c.
  *
    destruct (PeanoNat.Nat.eq_decidable n n0).
    **
      simpl.
      subst.
      rewrite <- EqNat.beq_nat_refl.
      apply steps_star_I.
    **
      simpl.
      apply PeanoNat.Nat.eqb_neq in H.
      rewrite PeanoNat.Nat.eqb_sym. 
      rewrite H.
      apply steps_once.
      apply steps_K.
  *
    simpl.
    apply steps_once.
    apply steps_K.
  *
    simpl.
    apply steps_once.
    apply steps_K.
  *
    simpl.
    eapply steps_many.
    apply steps_S.

    eapply steps_star_trans.
    apply steps_star_app_l.
    apply IHc1.
    apply steps_star_app_r.
    apply IHc2.
Qed.

Theorem subst_alpha_elim :
  forall c n f, (alpha_elim c n ; f) = (alpha_elim c n; (fmap_del f n )).
Proof.
  intros.
  induction c.
  *
    destruct (PeanoNat.Nat.eq_decidable n n0).
    **
      subst. simpl.
      rewrite <- EqNat.beq_nat_refl.
      simpl.
      reflexivity.
    **
      simpl.
      apply PeanoNat.Nat.eqb_neq in H.
      rewrite PeanoNat.Nat.eqb_sym.
      rewrite H.
      simpl.
      assert (fmap_del f n n0 = f n0). {
        unfold fmap_del.
        rewrite <- PeanoNat.Nat.eqb_sym.
        rewrite H.
        reflexivity.
      }
      rewrite H0.
      reflexivity.
  *
    simpl.
    reflexivity.
  *
    simpl.
    reflexivity.
  *
    simpl.
    rewrite IHc1.
    rewrite IHc2.
    reflexivity.
Qed.

(* Test applications of alpha elimination *)

Definition L_action := var 0 + (var 1 + var 1).
Definition L := alpha_elim (alpha_elim L_action 1) 0.

Theorem steps_star_L :
  forall x y, (L + x + y) ~>* x + (y + y).
Proof.
  intros.
  pose (0 !-> x, 1 !-> y, _) as f.
  assert (L + x + y = (L + var 0 + var 1 ; f)). {
    simpl.
    reflexivity.
  }
  assert (x + (y + y) = L_action ; f). {
    simpl.
    reflexivity.
  }
  rewrite H.
  rewrite H0.
  apply steps_star_subst.
  eapply steps_star_trans.
  apply steps_star_app_l.
  eapply steps_star_alpha_elim.
  apply steps_star_alpha_elim.
Qed.

(* Generalize to Theorem *)
Definition compile_1ary (c : cexpr) := alpha_elim c 0.
Definition compile_2ary (c : cexpr) := alpha_elim (alpha_elim c 1) 0.
Definition compile_3ary (c : cexpr) := alpha_elim (alpha_elim (alpha_elim c 2) 1) 0.

Fixpoint compile_nary (n : nat) (c : cexpr) :=
  match n with
  | 0 => c
  | Datatypes.S n' => compile_nary n' (alpha_elim c n')
  end.

Theorem steps_star_compile_1ary : forall c y, compile_nary 1 c + y ~>* (c ; (0 !-> y, _)).
Proof.
  intros.
  
  assert (compile_nary 1 c + y = (compile_nary 1 c + var 0; (0 !-> y, _))). {
    simpl.
    rewrite subst_alpha_elim.

    assert (is_empty (fmap_del (0 !-> y, _) 0)). {
      unfold is_empty.
      destruct n.
      unfold fmap_del. simpl. reflexivity.
      unfold fmap_del. simpl.
      unfold fmap_assn. simpl. unfold fmap_empty. reflexivity.
    }

    rewrite subst_empty. reflexivity.
    assumption.
  }

  rewrite H.
  apply steps_star_subst.
  apply steps_star_alpha_elim.
Qed.

Theorem steps_star_compile_2ary : forall c x y, compile_nary 2 c + x + y ~>* (c ; (0 !-> x, 1 !-> y, _)).
Proof.
  intros.

  assert (compile_nary 2 c + x + y = (compile_nary 2 c + var 0 + var 1 ; (0 !-> x, 1 !-> y, _))). {
    simpl.
    rewrite subst_alpha_elim.
    rewrite subst_alpha_elim.
    rewrite subst_empty.
    reflexivity.
    unfold is_empty.
    destruct n. reflexivity..
  }


  

(* Test vexpr

Definition test_vexpr := v1 v+ (v2 v+ v3).
Definition test_vexpr_assn : nat -> option cexpr :=
  fun n => match n with
           | 1 => Some S

           | 3 => Some K
           | _ => None
           end.

Compute (vexpr_subst test_vexpr test_vexpr_assn).
Compute (vexpr_to_cexpr (vexpr_subst test_vexpr test_vexpr_assn)).

*)

(* 


(* Deriving B M T basis from S K I *)
Definition T : cexpr := S + (K + (S + I)) + K.

Theorem steps_star_T : forall x y, (T + x + y) ~>* (y + x).
Proof.
  intros.
  unfold T.

  eapply steps_many.
  eapply (holy_steps ([?] <+ _)).
  apply steps_S.
  simpl.

  eapply steps_many.
  eapply (holy_steps ([?] <+ _ <+ _)).
  apply steps_K.
  simpl.

  eapply steps_many.
  apply steps_S.

  eapply steps_star_trans.
  eapply (holy_steps_star ([?] <+ _)).
  apply steps_star_I.
  simpl.

  eapply steps_once.
  eapply (holy_steps (_ +> [?])).
  apply steps_K.
Qed.

Definition B : cexpr := S + (K + S) + K.

Theorem steps_star_B : forall x y z, B + x + y + z ~>* x + (y + z).
Proof.
  intros.
  unfold B.

  eapply steps_many.
  eapply (holy_steps ([?] <+ _ <+ _)).
  apply steps_S.
  simpl.

  eapply steps_many.
  eapply (holy_steps ([?] <+ _ <+ _ <+ _)).
  apply steps_K.
  simpl.

  eapply steps_many.
  apply steps_S.

  eapply steps_once.
  eapply (holy_steps ([?] <+ _)).
  apply steps_K.
Qed.

Definition M : cexpr := S + I + I.

Theorem steps_star_M : forall x, M + x ~>* x + x.
Proof.
  intros.
  unfold M.

  eapply steps_many.
  apply steps_S.

  eapply steps_star_trans.
  apply (holy_steps_star ([?] <+ _)).
  apply steps_star_I.
  simpl.

  apply (holy_steps_star (_ +> [?])).
  apply steps_star_I.
Qed.

(* Some more useful combinators *)
Definition C : cexpr := B + (T + (B + B + T)) + (B + B + T).

Theorem steps_star_C : forall x y z, C + x + y + z ~>* x + z + y.
Proof.
  intros.
  unfold C.

  eapply steps_star_trans.
  eapply (holy_steps_star ([?] <+ _ <+ _)).
  apply steps_star_B.
  simpl.

  eapply steps_star_trans.
  eapply (holy_steps_star ([?] <+ _ <+ _)).
  apply steps_star_T.
  simpl.

  eapply steps_star_trans.
  eapply (holy_steps_star ([?] <+ _ <+ _ <+ _)).
  apply steps_star_B.
  simpl.

  eapply steps_star_trans.
  eapply (holy_steps_star ([?] <+ _)).
  apply steps_star_B.
  simpl.

  eapply steps_star_trans.
  eapply (holy_steps_star ([?] <+ _)).
  apply steps_star_T.
  simpl.

  eapply steps_star_trans.
  eapply (holy_steps_star ([?] <+ _ <+ _)).
  apply steps_star_B.
  simpl.

  eapply steps_star_trans.
  apply steps_star_B.

  apply steps_star_T.
Qed.

(* L combinator is useful for recursion *)
Definition L : cexpr := C + B + M.

Theorem steps_star_L : forall x y, L + x + y ~>* x + (y + y).
Proof.
  intros.
  unfold L.

  eapply steps_star_trans.
  eapply (holy_steps_star ([?] <+ _)).
  apply steps_star_C.
  simpl.

  eapply steps_star_trans.
  apply steps_star_B.

  eapply (holy_steps_star (_ +> [?])).
  apply steps_star_M.
Qed.

Definition sage (c : cexpr) := L + c + (L + c).

Theorem fixed_point_0 : forall c, (sage c) ~>* c + (sage c).
Proof.
  intros.
  unfold sage.
  apply steps_star_L.
Qed.

Definition V : cexpr := B + C + T.

Theorem steps_star_V : forall x y z, V + x + y + z ~>* z + x + y.
Proof.
  intros.
  unfold V.

  eapply steps_star_trans.
  eapply (holy_steps_star ([?] <+ _ <+ _)).
  apply steps_star_B.
  simpl.

  eapply steps_star_trans.
  apply steps_star_C.

  eapply (holy_steps_star ([?] <+ _)).
  apply steps_star_T.
Qed.

(* TRUE and FALSE combinators *)
Definition t : cexpr := K.

Theorem steps_star_t : forall p q, t + p + q ~>* p.
Proof.
  intros.
  unfold t.
  apply steps_once.
  apply steps_K.
Qed.

Definition f : cexpr := K + I.

Theorem steps_star_f : forall p q, f + p + q ~>* q.
Proof.
  intros.
  unfold f.

  eapply steps_many.
  eapply (holy_steps ([?] <+ _)).
  apply steps_K.
  simpl.

  apply steps_star_I.
Qed.

(* Modeling the non-negative integers *)

Definition nxt (n : cexpr) : cexpr := V + f + n.
Definition prv (n : cexpr) : cexpr := n + f.
Definition zro : cexpr := I.

Fixpoint rep (n: nat) :=
  match n with
  | 0 => zro
  | Datatypes.S m => nxt (rep m)
  end.


(* Representatives of positive integers are not equivalent to zro *)
Theorem nequiv_repSn_zro : forall n, rep (Datatypes.S n) ~/= zro.
Proof.
  unfold not.
  intros.
  simpl in H.
  unfold nxt in H.
  assert (V + f + rep n + K ~= I + K) as H0. {
    apply equiv_app_l.
    assumption.
  }
  assert (K + I ~= K) as H1. {
    eapply equiv_trans.
    apply equiv_sym.
    apply equiv_steps.
    apply steps_K.

    eapply equiv_trans.
    apply equiv_sym.
    apply equiv_steps_star.
    apply steps_star_V.

    eapply equiv_trans.
    apply H0.

    apply equiv_steps_star.
    apply steps_star_I.
  }

  eapply nequiv_K_Kx.
  apply equiv_sym.
  apply H1.
Qed.

Lemma equiv_repSm_repSn_imp :
  forall n m, rep (Datatypes.S n) ~= rep (Datatypes.S m) <->
              rep n ~= rep m.
Proof.
  split; intros.
  *
    simpl in H.
    unfold nxt in H.

    assert (V + f + rep n + f ~= V + f + rep m + f). {
      apply equiv_app_l. assumption.
    }

    assert (f + f + rep n ~= f + f + rep m). {
      eapply equiv_trans.
      apply equiv_sym.
      apply equiv_steps_star.
      apply steps_star_V.

      eapply equiv_trans.
      apply H0.
      apply equiv_steps_star.
      apply steps_star_V.
    }

    eapply equiv_trans.
    apply equiv_sym.
    apply equiv_steps_star.
    apply steps_star_f.

    eapply equiv_trans.
    apply H1.

    apply equiv_steps_star.
    apply steps_star_f.
  *
    simpl.
    unfold nxt.
    apply equiv_app_r.
    assumption.
Qed.

(* Representatives of different integers are not equivalent *)
Theorem nequiv_repn_repm : forall n m : nat, n < m -> rep n ~/= rep m.
Proof.
  intros.

  assert (exists (m' : nat), m = n + (Datatypes.S m'))%nat. {
    exists (m - n - 1).
    lia.
  }

  destruct H0.
  subst.

  clear H.

  induction n.
  *
    unfold not.
    intro.
    eapply nequiv_repSn_zro.
    simpl in H. simpl.
    apply equiv_sym.
    apply H.
  *
    unfold not.
    intro.

    rewrite plus_Sn_m in H.
    rewrite equiv_repSm_repSn_imp in H.
    apply IHn. apply H.
Qed.

(* So now we know every nat has a different representation. *)

(* Decidability of a set of natural numbers *)
Definition decides (c : cexpr) (P : nat -> Prop) :=
  forall n, (P n -> c + (rep n) ~>* t) /\ ((~ P n) -> c + (rep n) ~>* f).

Definition decidable (P : nat -> Prop) := exists c, decides c P.

Definition computes (c : cexpr) (n : nat) := c ~>* rep n.

(* Now we can make some arithmetic operators *)

(* zero test *)
Definition eq_zro : cexpr := T + t.

Theorem eq_zro_decides : decides eq_zro (fun n => n = 0).
Proof.
  unfold decides.
  intros.
  split;
    intros;
    subst;
    simpl;
    unfold eq_zro.

  *
    eapply steps_star_trans.
    apply steps_star_T.
    apply steps_star_I.
  *
    eapply steps_star_trans.
    apply steps_star_T.
    destruct n. contradiction.
    simpl.
    unfold nxt.
    eapply steps_star_trans.
    apply steps_star_V.
    apply steps_star_t.
Qed.  
  

Definition sum_op : cepxr := 

(* A numeral is a term of the form nxt ( nxt ( ... ( zro ) ) ) *)
Inductive is_numeral : cexpr -> Prop :=
| numeral_zro : is_numeral zro
| numeral_nxt : forall c, is_numeral c -> is_numeral (nxt c).

(* A numeric term can be reduced to a numeral, but is not itself a numeral *)
Definition is_numeric (c : cexpr) := exists (n : cexpr), (c ~= n /\ is_numeral n).

Theorem repn_is_numeral : forall n, is_numeral (rep n).
Proof.
  intros.
  induction n.
  * simpl. apply numeral_zro.
  * simpl. apply numeral_nxt. apply IHn.
Qed.

Notation "[ x ; .. ; y ]" := (cons x .. (cons y nil) .. ).

Fixpoint godel_number_l (c : cexpr) : list nat :=
  match c with
  | S => [ 1 ]
  | K => [ 2 ]
  | app c1 c2 => [3] ++ (godel_number_l c1) ++ (godel_number_l c2) ++ [4]
  end.

Fixpoint concat_l (l : list nat) : nat :=
  match l with
  | nil => 0
  | cons x l' => let e := length l' in ((pow 10 e) * x) + (concat_l l')
  end.

(* Do not try to compute this. It crashes Coq *)
Definition godel_number (c : cexpr) : nat :=
  concat_l (godel_number_l c).

(* Definition of computable set of numbers *)
Definition computable (p : nat -> Prop) := exists A, forall n, A (rep n) ~>* t <-> p n.

(* A number is truthy if it is the godel number of an expression that reduces to t *)
Definition is_truthy (n : nat) := exists c : cexpr, n = godel_number c /\ c ~= t.

(* Are truthy numbers computable? *)
Theorem godel_incompletness : ~ computable is_truthy.










